---
apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  resourceTrackingMethod: annotation
  kustomizeBuildOptions: --enable-alpha-plugins --load-restrictor LoadRestrictionsNone --helm-command /usr/local/bin/helm
  extraConfig:
    resource.compareoptions: |
      ignoreAggregatedRoles: true
  server:
    replicas: 1
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    resources:
      limits:
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    insecure: true
    route:
      enabled: true
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
    service:
      type: ""
  resourceIgnoreDifferences:
    resourceIdentifiers:
      - customization:
          jsonPointers:
            - /data
        kind: Secret
  resourceHealthChecks:
  - group: argoproj.io
    kind: Application
    check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.health ~= nil then
          hs.status = obj.status.health.status
          hs.message = obj.status.health.message
        end
      end
      return hs
  - group: route.openshift.io
    kind: Route
    check: |
      local health_status = {}
      if obj.status ~= nil then
        if obj.status.ingress ~= nil then
          local numIngressRules = 0
          local numTrue = 0
          local numFalse = 0
          for _, ingressRules in pairs(obj.status.ingress) do
              numIngressRules = numIngressRules + 1
              if obj.status.ingress ~= nil then
                for _, condition in pairs(ingressRules.conditions) do
                    if condition.type == "Admitted" and condition.status == "True" then
                        numTrue = numTrue + 1
                    elseif condition.type == "Admitted" and condition.status == "False" then
                        numFalse = numFalse + 1
                    end
                end
              end
              health_status.status = 'Test'
          end
          if numTrue == numIngressRules then
            health_status.status = "Healthy"
            health_status.message = "Route is healthy"
            return health_status
          elseif numFalse > 0 then
            health_status.status = "Degraded"
            health_status.message = "Route is degraded"
            return health_status
          else
            health_status.status = "Progressing"
            health_status.message = "Route is still getting admitted"
            return health_status
          end
        end
      end
      health_status.status = "Progressing"
      health_status.message = "Route is still getting admitted"
      return health_status
  grafana:
    enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    route:
      enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  applicationSet:
    #extraCommandArgs:
    #  - --enable-progressive-syncs
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  rbac:
    defaultPolicy: 'role:admin'
    policy: |
      p, role:none, *, *, */*, deny
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
      g, admin, role:admin
    scopes: "[groups]"
  repo:
    replicas: 1
    env:
    - name: KUSTOMIZE_PLUGIN_HOME
      value: /etc/kustomize/plugin
    initContainers:
    - args:
      - -c
      - cp /policy-generator/PolicyGenerator-not-fips-compliant /policy-generator-tmp/PolicyGenerator
      command:
      - /bin/bash
      image: registry.redhat.io/rhacm2/multicluster-operators-subscription-rhel9:v2.11
      name: policy-generator-install
      volumeMounts:
      - mountPath: /policy-generator-tmp
        name: policy-generator
    volumeMounts:
    - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
      name: policy-generator
    sidecarContainers:
      - name: setenv-plugin
        command: [/var/run/argocd/argocd-cmp-server]
        envFrom:
        - configMapRef:
            name: environment-variables
        image: quay.io/raffaelespazzoli/raffa-envsub:1.1
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: setenv-cmp-plugin
          - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
            name: policy-generator
    volumes:
      - configMap:
          name: setenv-cmp-plugin
        name: setenv-cmp-plugin
      - emptyDir: {}
        name: policy-generator
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - internal.open-cluster-management.io
      kinds:
      - ManagedClusterInfo
      clusters:
      - "*"
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  sso:
    dex:
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
      openShiftOAuth: true
    provider: dex
  ha:
    enabled: false
    resources:
      limits:
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 250m
        memory: 1Gi
    sharding:
      enabled: false
      shards: 1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: setenv-cmp-plugin
  namespace: openshift-gitops
data:
  plugin.yaml: |
    apiVersion: argoproj.io/v1alpha1
    kind: ConfigManagementPlugin
    metadata:
      name: setenv-cmp-plugin
    spec:
      version: v1.0
      init:
        command: [sh, -c, 'echo "Initializing setenv-plugin-cmp..."']
      generate:
        command:
          - sh
          - "-c"
          - "set -o pipefail && kustomize build --load-restrictor LoadRestrictionsNone --enable-helm --enable-alpha-plugins . | envsub"
      discover:
        find:
          command: [sh, -c, 'find . -maxdepth 1 -name kustomization.yaml']
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: environment-variables
  namespace: openshift-gitops
  annotations:
    reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
    reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "acm-policies"
    reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
    reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "acm-policies"
data:
  KUSTOMIZE_PLUGIN_HOME: /etc/kustomize/plugin
  CLUSTER_NAME: '${cluster_name}'
  CLUSTER_BASE_DOMAIN: '${cluster_base_domain}'
          # all created clusters base domain should be <cluster-name>.<PLATFORM_BASE_DOMAIN>
  PLATFORM_BASE_DOMAIN: '${platform_base_domain}'
  HUB_BASE_DOMAIN: '${cluster_base_domain}'
  INFRA_GITOPS_REPO: '${gitops_repo}'
